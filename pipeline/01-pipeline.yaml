apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: news-demo-dev-deploy
  namespace: news-demo-dev
spec:
  params:
    - name: REPO
    - name: REVISION
    - name: IMAGE
    - name: TAG
    - name: NAMESPACE
    - name: CONFIG_REPO_URL
    - name: CONFIG_REPO
    - name: GIT_USERNAME
    - name: GIT_PASSWORD
  workspaces:
    - name: shared-workspace
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: $(params.REPO)
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: $(params.REVISION)
    - name: build-push-image
      taskRef:
        name: buildah
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: IMAGE
          value: $(params.IMAGE):$(params.TAG)
        - name: FORMAT
          value: "docker"
      runAfter:
        - fetch-repository
    - name: check-deployment
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            kubectl describe deployment news-demo-dev -n "$(params.NAMESPACE)" >/dev/null 2>/dev/null
            if [[ $? -eq 0 ]]; then
              printf yes | tee /tekton/results/output-result
            else
              printf no | tee /tekton/results/output-result
            fi
      runAfter:
        - build-push-image
    - name: patch-image
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            kubectl patch deployment news-demo-dev --patch='{"spec":{"template":{"spec":{
              "containers":[{
                "name": "news-demo-dev",
                "image": "$(params.IMAGE):$(params.TAG)"
              }]
            }}}}' -n $(params.NAMESPACE)
      when:
        - input: "$(tasks.check-deployment.results.output-result)"
          operator: in
          values: ["yes"]
      runAfter:
        - check-deployment
    - name: create-deployment
      taskRef:
        name: kubernetes-actions
      workspaces:
        - name: manifest-dir
          workspace: shared-workspace
      params:
        - name: script
          value: |
            kubectl -n $(params.NAMESPACE) apply -f <(sed "s@image:.*@image: $(params.IMAGE):$(params.TAG)@" k8s/02-deployment.yaml)
      when:
        - input: "$(tasks.check-deployment.results.output-result)"
          operator: in
          values: ["no"]
    - name: update-deployment-image-for-staging
      taskRef:
        name: git-update-deployment
      workspaces:
        - name: workspace
          workspace: shared-workspace
      params:
      - name: GIT_REPOSITORY
        value: $(params.CONFIG_REPO_URL) #"https://github.com/sm43/tekton-argocd"
      - name: GIT_USERNAME
        value: $(params.GIT_USERNAME) #"sm43"
      - name: GIT_PASSWORD
        value: $(params.GIT_PASSWORD)
      - name: NEW_IMAGE
        value: $(params.IMAGE)
      - name: BASE_BRANCH
        value: "single-cluster"
      - name: NEW_TAG
        value: $(params.TAG)
      runAfter:
        - check-deployment
    - name: create-pullrequest-staging
      taskRef:
        name: github-open-pr
      params:
        - name: REPO_FULL_NAME
          value: $(params.CONFIG_REPO)
        - name: HEAD
          value: ci-$(params.TAG)
        - name: BASE
          value: "single-cluster"
        - name: TITLE
          value: "Updating Deployment Image"
        - name: BODY
          value: "updating image for staging deployment"
        - name: AUTH_TYPE
          value: token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
      runAfter:
        - update-deployment-image-for-staging
